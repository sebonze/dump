
public class Hexadoku
{
	private char[] hexDigits =
	{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
			'F'};
	private int[][] data = // Zeile / Spalte
	{
			{-1, 5, 6, -1, 2, -1, -1, 7, -1, -1, 14, 10, -1, -1, 9, 11},
			{-1, 11, -1, -1, 8, -1, 9, -1, -1, -1, 15, -1, -1, 12, -1, 5},
			{8, 9, -1, 15, -1, 14, 5, 1, -1, 3, -1, -1, 6, 7, 13, -1},
			{-1, 12, -1, 3, 6, -1, -1, -1, -1, 13, -1, -1, 10, 14, -1, -1},

			{-1, 13, 8, -1, 15, -1, -1, -1, 0, 4, -1, 11, -1, -1, -1, 10},
			{-1, -1, 3, -1, -1, 9, 11, 5, 13, 6, 12, -1, -1, -1, 14, 4},
			{15, -1, -1, 5, 10, -1, -1, -1, -1, -1, 8, 9, 0, 2, -1, -1},
			{11, -1, -1, -1, -1, -1, 4, -1, -1, -1, 3, 7, -1, -1, -1, -1},

			{-1, 3, -1, -1, 1, 4, -1, -1, -1, -1, 6, -1, -1, 10, -1, 15},
			{-1, 15, 13, 12, 9, 5, -1, -1, 3, -1, 0, -1, -1, 11, 1, -1},
			{-1, -1, 0, 7, -1, -1, 12, 6, -1, -1, 4, -1, -1, 5, -1, -1},
			{-1, -1, -1, -1, -1, -1, 15, 2, -1, 10, -1, 13, 3, -1, 0, 9},

			{-1, 2, -1, -1, -1, 6, 1, -1, -1, 12, -1, -1, 4, 8, -1, -1},
			{-1, -1, 1, -1, -1, 0, 2, -1, -1, -1, 7, 3, -1, -1, -1, 14},
			{9, -1, -1, 10, -1, -1, 14, 15, -1, -1, -1, 6, 11, 0, 2, 1},
			{-1, 14, -1, -1, -1, -1, -1, -1, 11, 5, -1, -1, -1, 6, -1, -1}

	};

	



	/*
	 * Method used for the output , it also uses the Method deztohex to Convert
	 * Numbers greater than 9 to hex char's
	 */
	private void output()
	{
		System.out.println();
		for (int line = 0; line < 16; line++)
		{
			for (int column = 0; column < 16; column++)
			{
				if (data[line][column] == -1)
					System.out.print("# ");
				else if (data[line][column] > 9)
					System.out.print(deztohex(data[line][column]) + " ");
				else
					System.out.print(data[line][column] + " ");
			}
			System.out.println();
		}

	}
	
	
	/*
	 * Used by output , described above
	 */
	private char deztohex(int dez)
	{
		char hex = ' ';
		hex = hexDigits[dez];
		return hex;
	}
	/*
	 * used to solve the hexadoku
	 */
	private void solve()
	{

		for (int line = 0; line < 16; line++) // counts lines
		{

			for (int column = 0; column < 16; column++) // counts columns
			{
			
			}
					
					

		}

	}

		

	
	
	

	private boolean checkline(int n, int line, int col)

	private boolean checkcol(int n, int line, int col)

	private boolean checkblock(int n, int line, int col)
	
	
	
	private int empty()
	
	/*
	 * Creates a new Hexadoku Object and executes implemented Methods to output
	 * and solve the Hexadoku
	 */
	public static void main(String[] args)
	{
		Hexadoku sfe = new Hexadoku();
		System.out.println("The Hexadoku has "+ sfe.empty() + " empty fields");
		sfe.output();
		sfe.solve();
		//sfe.output();
		

	}

}
